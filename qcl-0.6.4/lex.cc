#line 2 "lex.cc"

#line 4 "lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 128
#define YY_END_OF_BUFFER 129
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[405] =
    {   0,
        0,    0,  113,  113,  116,  116,  121,  121,    0,    0,
        0,    0,    0,    0,  129,  127,  126,  126,   46,  112,
       45,   46,   43,   43,   44,   44,  127,   44,  105,   41,
       49,   45,   45,   45,  110,  110,  110,   39,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
       47,   48,   45,  125,  113,  128,  114,  116,  118,  117,
      121,  122,  101,  102,   99,  124,   38,  111,    0,    0,
        0,   33,   42,  115,  120,  107,  105,   40,   49,   34,
       36,   35,   37,  109,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,   13,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,   16,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,    8,  110,  110,  110,
      110,  110,  110,   47,   48,  123,  113,  116,  117,  117,
      119,  121,  101,   99,  124,    0,    0,    0,  106,  107,
       32,   74,   73,  110,   15,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
        7,  110,  110,  110,   51,  110,  110,  110,  110,  110,
      110,  110,  110,   19,   18,  110,   92,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,   17,  110,  123,    0,    0,    0,    0,   72,
       91,   90,  110,  110,  110,  110,    2,  110,  110,   65,
      110,   67,  110,   26,   14,   23,   63,  110,  110,  110,
       88,  110,  110,   80,   89,   28,   29,   84,  110,   87,
      110,   86,   79,  110,   27,  110,  110,  110,  110,  110,
      110,  110,  110,   52,  110,  110,   30,   98,  110,   64,
      110,  110,   20,  110,   66,  110,  110,  103,  110,  110,
      110,   93,  110,    0,  108,    0,  110,   11,   77,  110,

       75,    1,   69,   71,  110,  104,  110,  110,   21,  110,
      110,  110,   22,  110,  110,  110,   55,  110,  110,  110,
       81,   25,  110,   31,   68,   78,  110,   70,  110,   10,
      110,    9,  110,    0,  110,  110,    3,   76,  110,   61,
      110,  110,  110,   59,  110,  110,  110,   57,  110,   12,
       54,  110,   60,  110,   50,   53,  110,   95,   24,  110,
      110,   56,    6,  110,   85,   83,   62,   94,    0,  109,
      110,   82,    0,    4,  110,  110,   96,    0,  110,  100,
        5,   58,    0,  110,    0,  110,    0,  110,    0,  110,
        0,  110,    0,  110,    0,    0,    0,    0,    0,    0,

        0,    0,   97,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    1,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   28,   28,   29,   28,
       28,   28,   30,   31,   28,   28,   32,   28,   33,   34,
       28,   35,   28,   36,   28,   28,   28,   37,   38,   28,
       39,   40,   41,   42,    1,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   28,   68,    1,   69,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    2,    3,    1,    4,    1,    2,    1,    1,    5,
        1,    6,    1,    1,    7,    1,    1,    5,    5,    1,
        4,    1,    1,    1,    1,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    1,    1,
        1,    1,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    1
    } ;

static yyconst flex_int16_t yy_base[418] =
    {   0,
        0,   48,   69,   72,   74,   75,  950,  949,   78,   81,
       88,    0,  156,  162,  951,  954,  954,  954,  927,  942,
      954,  954,  166,  954,  954,  924,  931,  158,  170,  926,
      188,  151,  922,  921,  933,  150,  152,  954,  162,  163,
      168,  166,  170,  184,  172,  186,  188,  197,  190,  177,
      192,  187,  185,  206,  212,  202,  216,  193,  194,  200,
      271,  275,  266,  954,    0,  954,  954,    0,  954,  196,
        0,  954,    0,  954,    0,    0,  954,  954,  280,  212,
      289,  954,  954,  954,  954,  268,  293,  954,  311,  918,
      954,  954,  954,  954,  931,  930,  929,  201,  251,  209,

      260,  254,  273,  280,  211,  290,  292,  250,  296,  300,
      309,  928,  311,  308,  310,  315,  312,  316,  319,  320,
      317,  318,  927,  313,  329,  336,  321,  342,  323,  327,
      335,  334,  328,  347,  337,  339,  926,  338,  330,  357,
      358,  351,  352,  410,  414,  403,    0,    0,  408,  409,
      954,    0,    0,    0,    0,  422,  427,  436,  954,  380,
      954,  954,  954,  925,  924,  923,  412,  400,  413,  381,
      418,  423,  424,  420,  434,  427,  922,  437,  438,  439,
      921,  920,  441,  442,  919,  918,  446,  447,  917,  443,
      916,  448,  915,  914,  913,  450,  954,  449,  451,  452,

      455,  453,  459,  470,  461,  458,  465,  466,  462,  467,
      480,  473,  476,  477,  478,  481,  484,  482,  488,  490,
      491,  492,  908,  507,  518,  542,  503,  540,  560,  954,
      954,  954,  519,  514,  907,  518,  906,  897,  520,  954,
      896,  954,  889,  881,  876,  873,  954,  521,  523,  527,
      954,  528,  530,  954,  954,  865,  864,  954,  538,  954,
      539,  954,  954,  540,  861,  542,  553,  554,  558,  544,
      559,  565,  563,  860,  566,  567,  816,  583,  570,  954,
      815,  814,  813,  574,  954,  812,  576,  811,  580,  584,
      585,  954,  586,  596,  954,  604,  593,  809,  954,  595,

      954,  808,  954,  954,  587,  807,  805,  589,  804,  598,
      601,  603,  803,  602,  607,  611,  802,  608,  616,  615,
      954,  801,  621,  799,  954,  954,  627,  954,  628,  798,
      629,  796,  630,  655,  634,  635,  795,  954,  636,  794,
      639,  637,  640,  793,  642,  644,  645,  792,  791,  790,
      789,  648,  788,  707,  787,  785,  670,  954,  784,  767,
      768,  783,  782,  653,  954,  954,  781,  954,  757,  756,
      649,  954,  690,  778,  769,  770,  954,  760,  669,  954,
      776,  775,  753,  668,  674,  771,  667,  772,  668,  659,
      662,  671,  664,  773,  624,  639,  357,  340,  337,  304,

      164,   61,  954,  954,  828,  836,  844,  852,  860,  864,
      872,  880,  888,  896,  904,  906,  914
    } ;

static yyconst flex_int16_t yy_def[418] =
    {   0,
      404,    1,  405,  405,  406,  406,  407,  407,  408,  408,
      404,   11,  409,  409,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  410,  410,  410,  404,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      404,  404,  404,  404,  411,  404,  404,  412,  404,  413,
      414,  404,  415,  404,  416,  417,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  404,  404,  404,  411,  412,  413,  413,
      404,  414,  415,  416,  417,  404,  404,  404,  404,  404,
      404,  404,  404,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  404,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  404,  404,  404,  404,  404,  404,
      404,  404,  410,  410,  410,  410,  410,  410,  410,  404,
      410,  404,  410,  410,  410,  410,  404,  410,  410,  410,
      404,  410,  410,  404,  404,  410,  410,  404,  410,  404,
      410,  404,  404,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  404,  410,  404,
      410,  410,  410,  410,  404,  410,  410,  410,  410,  410,
      410,  404,  410,  404,  404,  404,  410,  410,  404,  410,

      404,  410,  404,  404,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      404,  410,  410,  410,  404,  404,  410,  404,  410,  410,
      410,  410,  410,  404,  410,  410,  410,  404,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  404,  410,  410,  410,  404,  410,  410,
      410,  410,  410,  410,  404,  404,  410,  404,  404,  404,
      410,  404,  404,  410,  410,  410,  404,  404,  410,  404,
      410,  410,  404,  410,  404,  410,  404,  410,  404,  410,
      404,  410,  404,  410,  404,  404,  404,  404,  404,  404,

      404,  404,  404,    0,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404
    } ;

static yyconst flex_int16_t yy_nxt[1024] =
    {   0,
       16,   17,   18,   17,   17,   19,   20,   21,   22,   23,
       24,   25,   25,   22,   26,   27,   28,   29,   29,   30,
       31,   32,   33,   34,   16,   35,   35,   35,   35,   36,
       35,   35,   35,   35,   37,   35,   35,   35,   24,   38,
       24,   25,   39,   40,   41,   42,   43,   44,   45,   35,
       46,   35,   35,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       66,   66,   64,   66,   66,   67,   69,   69,   67,   66,
       66,  403,   66,   66,   74,   70,   70,   74,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,

       66,   66,   75,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   66,   66,   66,   66,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   66,   66,   66,   66,   94,
       66,   94,   66,   66,   66,   90,   66,   79,   66,   84,
       79,   94,   94,   91,   85,   94,   66,   94,   80,   94,
       80,   94,   66,   81,   81,   86,   94,   87,   87,   89,
       89,   89,   89,   94,   94,   94,   94,   94,   97,   94,

      402,   94,   94,   94,   96,   98,   94,  150,   89,   94,
       94,   94,  151,  100,  103,   94,  111,   99,   94,  101,
       94,   94,  102,  106,  104,   94,  108,  127,  105,   81,
       81,  128,  114,  112,  122,  107,  123,  109,  115,  117,
      110,  113,  141,  118,  116,  124,  121,  119,  129,  126,
      142,  125,  130,  120,  135,  131,  132,  139,  136,   94,
       94,  164,  140,   94,  133,  174,  143,  134,  137,   94,
      166,  138,  144,  144,  144,  144,  145,  145,  145,  145,
       90,   79,   94,  159,   79,  160,  160,  146,   91,   94,
      156,  144,   80,  156,   80,  145,  165,   81,   81,   94,

      168,   94,  157,  179,  158,   94,   81,   81,   86,   94,
       87,   87,   89,   89,   89,   89,  167,   94,   94,   94,
       94,   94,   94,  169,   94,   94,   94,   94,   94,   94,
       94,   89,   94,  401,  170,  171,   94,   94,   94,   94,
      172,  173,  176,   94,   94,   94,   94,   94,   94,  177,
      175,   94,  180,  178,  182,  183,   94,  188,  192,  181,
       94,   94,  186,  189,  196,  194,   94,   94,  184,  198,
      187,  400,  185,  190,  193,  399,  206,  191,  195,  199,
      201,  212,  398,  202,  207,  200,  210,  214,  211,  213,
       94,  220,  217,  215,  218,  203,  204,  160,  160,  205,

      219,  221,  208,  209,  225,  224,  216,  225,  222,   94,
      223,  144,  144,  144,  144,  145,  145,  145,  145,  404,
      150,   94,   94,  156,  404,  151,  156,   94,  226,   94,
      144,  226,  240,  242,  145,  157,   94,  156,  236,  227,
      156,  227,  234,   94,  228,  228,   94,   94,   94,  157,
       94,   94,   94,  229,  229,   94,   94,   94,   94,   94,
       94,   94,   94,  237,   94,  233,  235,   94,   94,  238,
       94,   94,  241,  243,   94,   94,   94,  244,  239,   94,
      245,  278,   94,  248,  278,  280,   94,   94,  246,   94,
       94,   94,  257,  285,  252,  250,  267,   94,  249,   94,

       94,   94,  259,  273,  253,  270,  266,  256,  261,  264,
      265,  268,  275,  277,  271,  269,   94,  272,  274,  225,
      228,  228,  225,   94,  276,  281,  279,   94,   94,   94,
       94,  284,   94,  286,  288,  283,   94,   94,  282,   94,
      289,  294,  287,  226,  294,  291,  226,   94,   94,   94,
      295,   94,  290,   94,  227,  296,  227,  228,  228,  228,
      228,  156,   94,   94,  156,  297,  298,   94,   94,  306,
      293,  300,   94,  157,   94,   94,   94,  229,  229,   94,
      305,  302,  312,   94,  278,   94,  307,  278,  310,   94,
      308,  309,  317,   94,   94,   94,   94,  294,   94,  314,

      294,  311,   94,  313,   94,  294,  295,   94,  294,  315,
       94,   94,   94,  316,  295,  319,   94,   94,  318,  320,
       94,  334,  334,  324,   94,   94,  323,  322,  333,  327,
       94,  332,  329,  330,  339,  335,   94,   94,   94,   94,
      331,  336,  337,   94,   94,   94,   94,  343,   94,   94,
      347,   94,  344,   94,   94,  346,  294,   94,   94,  294,
      341,  348,   94,  340,  342,  295,  367,  345,   94,  349,
      397,  373,  334,  334,  373,  351,  350,   94,   94,   94,
       94,  379,  357,  354,  396,  359,  395,  352,  353,  355,
      393,  373,  392,  360,  373,  384,  380,  376,  386,  394,

      356,  391,  361,  362,  389,  363,  364,  369,  369,  387,
      369,  369,  369,  369,  369,  369,  370,  369,  369,  369,
      369,  369,  369,  369,  371,  371,  369,  369,  369,  369,
      369,  369,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  369,  369,  369,  369,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  369,  369,   94,   94,   94,   94,
       94,   94,   94,  385,   94,   94,  383,   94,  378,  378,
      377,   94,   94,   94,  372,  395,   94,  368,  366,   94,

      365,   94,   94,  358,   94,   94,  388,   94,   94,  390,
       94,   94,   94,   94,  338,  381,   94,   94,   94,  382,
       94,  328,   94,  326,  325,   94,  374,  375,   65,   65,
       65,   65,   65,   65,   65,   65,   68,   68,   68,   68,
       68,   68,   68,   68,   71,   71,   71,   71,   71,   71,
       71,   71,   73,   73,   73,   73,   73,   73,   73,   73,
       76,   76,   76,   76,   76,   76,   76,   76,   95,  321,
       94,   95,  147,   94,   94,  147,  147,  147,  147,  147,
      148,  148,   94,  148,  148,   94,  148,  148,  149,  149,
       94,  149,  149,  149,  149,  149,  152,  152,  304,  152,

      152,  152,  152,  152,  153,  303,  301,  153,  153,  153,
      153,  153,  154,  154,  155,   94,  299,  292,  155,  155,
      155,  155,  263,   94,  262,  260,  258,  255,  254,  251,
       94,  247,  232,  231,  230,   94,  197,   94,  163,  162,
       94,  161,   94,   93,   92,   88,   83,   82,   78,   77,
      404,   72,   72,   15,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404
    } ;

static yyconst flex_int16_t yy_chk[1024] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    2,    4,    4,    3,    5,    6,    4,    9,
        9,  402,   10,   10,    9,    5,    6,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   13,   36,
       13,   37,   13,   14,   14,   32,   14,   23,   14,   28,
       23,   39,   40,   32,   28,   42,   13,   41,   23,   43,
       23,   45,   14,   23,   23,   29,   50,   29,   29,   31,
       31,   31,   31,   44,   53,   46,   52,   47,   37,   49,

      401,   51,   58,   59,   36,   39,   48,   70,   31,   60,
       98,   56,   70,   40,   41,   54,   45,   39,  100,   40,
      105,   55,   40,   43,   41,   57,   44,   53,   42,   80,
       80,   53,   47,   46,   50,   43,   50,   44,   47,   48,
       44,   46,   58,   48,   47,   51,   49,   48,   54,   52,
       59,   51,   54,   48,   55,   54,   54,   56,   55,  108,
       99,   98,   57,  102,   54,  105,   60,   54,   55,  101,
      100,   55,   61,   61,   61,   61,   62,   62,   62,   62,
       63,   79,  103,   86,   79,   86,   86,   63,   63,  104,
       81,   61,   79,   81,   79,   62,   99,   79,   79,  106,

      102,  107,   81,  108,   81,  109,   81,   81,   87,  110,
       87,   87,   89,   89,   89,   89,  101,  114,  111,  115,
      113,  117,  124,  103,  116,  118,  121,  122,  119,  120,
      127,   89,  129,  400,  104,  104,  130,  133,  125,  139,
      104,  104,  107,  132,  131,  126,  135,  138,  136,  107,
      106,  128,  109,  107,  111,  113,  134,  116,  118,  110,
      142,  143,  114,  116,  122,  120,  140,  141,  113,  124,
      115,  399,  113,  117,  119,  398,  127,  117,  121,  125,
      126,  131,  397,  126,  128,  125,  129,  133,  130,  132,
      170,  139,  135,  134,  136,  126,  126,  160,  160,  126,

      138,  140,  128,  128,  146,  143,  134,  146,  141,  168,
      142,  144,  144,  144,  144,  145,  145,  145,  145,  149,
      150,  167,  169,  156,  149,  150,  156,  171,  157,  174,
      144,  157,  172,  173,  145,  156,  176,  158,  170,  157,
      158,  157,  168,  175,  157,  157,  178,  179,  180,  158,
      183,  184,  190,  158,  158,  187,  188,  192,  198,  196,
      199,  200,  202,  171,  201,  167,  169,  206,  203,  171,
      205,  209,  172,  173,  207,  208,  210,  174,  171,  204,
      175,  211,  212,  178,  211,  213,  214,  215,  176,  211,
      216,  218,  188,  217,  183,  180,  200,  219,  179,  220,

      221,  222,  190,  206,  184,  203,  199,  187,  192,  196,
      198,  201,  208,  210,  204,  202,  224,  205,  207,  225,
      227,  227,  225,  234,  209,  213,  212,  236,  233,  239,
      248,  216,  249,  217,  219,  215,  250,  252,  214,  253,
      220,  228,  218,  226,  228,  222,  226,  259,  261,  264,
      228,  266,  221,  270,  226,  228,  226,  228,  228,  226,
      226,  229,  267,  268,  229,  233,  234,  269,  271,  249,
      224,  236,  273,  229,  272,  275,  276,  229,  229,  279,
      248,  239,  264,  284,  278,  287,  250,  278,  259,  289,
      252,  253,  270,  290,  291,  293,  305,  294,  308,  267,

      294,  261,  297,  266,  300,  296,  294,  310,  296,  268,
      311,  314,  312,  269,  296,  272,  315,  318,  271,  273,
      316,  296,  296,  279,  320,  319,  276,  275,  293,  284,
      323,  291,  287,  289,  308,  297,  327,  329,  331,  333,
      290,  300,  305,  335,  336,  339,  342,  314,  341,  343,
      318,  345,  315,  346,  347,  316,  334,  352,  371,  334,
      311,  319,  364,  310,  312,  334,  352,  315,  390,  320,
      396,  357,  334,  334,  357,  327,  323,  384,  379,  357,
      392,  371,  339,  333,  395,  341,  393,  329,  331,  335,
      391,  373,  390,  342,  373,  379,  373,  364,  384,  392,

      336,  389,  343,  345,  387,  346,  347,  354,  354,  385,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  360,  361,  375,  376,
      386,  388,  394,  383,  382,  381,  378,  374,  370,  369,
      367,  363,  362,  359,  356,  394,  355,  353,  351,  350,

      349,  348,  344,  340,  337,  332,  386,  330,  324,  388,
      322,  317,  313,  309,  307,  375,  306,  302,  298,  376,
      288,  286,  283,  282,  281,  277,  360,  361,  405,  405,
      405,  405,  405,  405,  405,  405,  406,  406,  406,  406,
      406,  406,  406,  406,  407,  407,  407,  407,  407,  407,
      407,  407,  408,  408,  408,  408,  408,  408,  408,  408,
      409,  409,  409,  409,  409,  409,  409,  409,  410,  274,
      265,  410,  411,  257,  256,  411,  411,  411,  411,  411,
      412,  412,  246,  412,  412,  245,  412,  412,  413,  413,
      244,  413,  413,  413,  413,  413,  414,  414,  243,  414,

      414,  414,  414,  414,  415,  241,  238,  415,  415,  415,
      415,  415,  416,  416,  417,  237,  235,  223,  417,  417,
      417,  417,  195,  194,  193,  191,  189,  186,  185,  182,
      181,  177,  166,  165,  164,  137,  123,  112,   97,   96,
       95,   90,   35,   34,   33,   30,   27,   26,   20,   19,
       15,    8,    7,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[129] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 1, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "qcl.lex"
#line 2 "qcl.lex"

/**********************************************************************

This file is part of the Quantum Computation Language QCL.

(c) Copyright by Bernhard Oemer <oemer@tph.tuwien.ac.at>, 1998

This program comes without any warranty; without even the implied 
warranty of merchantability or fitness for any particular purpose.

     This program is free software under the terms of the 
     GNU General Public Licence (GPL) version 2 or higher

************************************************************************/

#include "types.h"
#include "syntax.h"
#include "parse.h"
#include "yacc.h"

YY_BUFFER_STATE include_stack[YYMAXINCLUDE];
YY_BUFFER_STATE string_buffer;
FILE* toplevel_file;

double cnum_real,cnum_imag;







#line 883 "lex.cc"

#define INITIAL 0
#define STR 1
#define REM 2
#define COM 3
#define INC 4
#define SET 5
#define SCINC 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "qcl.lex"


#line 1082 "lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 405 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 954 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 52 "qcl.lex"
yylval.OBJ=0; return tokCONST;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "qcl.lex"
yylval.OBJ=0; return tokCOND; 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 54 "qcl.lex"
yylval.OBJ=0; return tokEXTERN;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 55 "qcl.lex"
yylval.OBJ=0; return tokOP;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 56 "qcl.lex"
yylval.OBJ=0; return tokPROC;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 57 "qcl.lex"
yylval.OBJ=0; return tokQUFUN;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 58 "qcl.lex"
yylval.OBJ=0; return tokFOR;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 59 "qcl.lex"
yylval.OBJ=0; return tokTO;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 60 "qcl.lex"
yylval.OBJ=0; return tokWHILE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 61 "qcl.lex"
yylval.OBJ=0; return tokUNTIL;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 62 "qcl.lex"
yylval.OBJ=0; return tokBREAK; 
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 63 "qcl.lex"
yylval.OBJ=0; return tokRETURN;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 64 "qcl.lex"
yylval.OBJ=0; return tokIF;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 65 "qcl.lex"
yylval.OBJ=0; return tokELSE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 66 "qcl.lex"
yylval.OBJ=0; return tokAND;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 67 "qcl.lex"
yylval.OBJ=0; return tokOR;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 68 "qcl.lex"
yylval.OBJ=0; return tokXOR;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 69 "qcl.lex"
yylval.OBJ=0; return tokNOT;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 70 "qcl.lex"
yylval.OBJ=0; return tokMOD;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 71 "qcl.lex"
yylval.OBJ=0; return tokSTEP;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 72 "qcl.lex"
yylval.OBJ=0; return tokINPUT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 73 "qcl.lex"
yylval.OBJ=0; return tokPRINT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 74 "qcl.lex"
yylval.OBJ=0; return tokEXIT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 75 "qcl.lex"
yylval.OBJ=0; return tokMEASURE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 76 "qcl.lex"
yylval.OBJ=0; return tokRESET;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 77 "qcl.lex"
yylval.OBJ=0; return tokDUMP;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "qcl.lex"
yylval.OBJ=0; return tokPLOT; 
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "qcl.lex"
yylval.OBJ=0; return tokINSPECT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "qcl.lex"
yylval.OBJ=0; return tokLOAD;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "qcl.lex"
yylval.OBJ=0; return tokSAVE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "qcl.lex"
yylval.OBJ=0; return tokSHELL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 84 "qcl.lex"
yylval.OBJ=0; return tokSWAP;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 85 "qcl.lex"
yylval.OBJ=0; return tokTRANS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 86 "qcl.lex"
yylval.OBJ=0; return tokINVTRANS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 87 "qcl.lex"
yylval.OBJ=0; return tokEQ;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 88 "qcl.lex"
yylval.OBJ=0; return tokLEEQ;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 89 "qcl.lex"
yylval.OBJ=0; return tokGREQ;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 90 "qcl.lex"
yylval.OBJ=0; return tokNOTEQ;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 91 "qcl.lex"
yylval.OBJ=0; return tokRANGE_LENGTH;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 92 "qcl.lex"
yylval.OBJ=0; return tokRANGE_LENGTH;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "qcl.lex"
yylval.OBJ=0; return tokRANGE_END; 
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "qcl.lex"
yylval.OBJ=0; return tokRANGE_END; 
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 96 "qcl.lex"
yylval.OBJ=0; return *yytext;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 97 "qcl.lex"
yylval.OBJ=0; return *yytext;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 98 "qcl.lex"
yylval.OBJ=0; return *yytext;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 99 "qcl.lex"
yylval.OBJ=0; return *yytext;
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 101 "qcl.lex"
yylval.OBJ=0; return '{';
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 102 "qcl.lex"
yylval.OBJ=0; return '}';
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 103 "qcl.lex"
yylval.OBJ=0; return ';';
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 105 "qcl.lex"
yylval.TYPE=tBOOLEAN; return tokTYPE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 106 "qcl.lex"
yylval.TYPE=tINTEGER; return tokTYPE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 107 "qcl.lex"
yylval.TYPE=tREAL; return tokTYPE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 108 "qcl.lex"
yylval.TYPE=tCOMPLEX; return tokTYPE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 109 "qcl.lex"
yylval.TYPE=tSTRING; return tokTYPE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 110 "qcl.lex"
yylval.TYPE=tQUREG; return tokTYPE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 111 "qcl.lex"
yylval.TYPE=tQUCONST; return tokTYPE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 112 "qcl.lex"
yylval.TYPE=tQUVOID; return tokTYPE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 113 "qcl.lex"
yylval.TYPE=tQUSCR; return tokTYPE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 114 "qcl.lex"
yylval.TYPE=tQUCOND; return tokTYPE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 116 "qcl.lex"
yylval.TENSOR=1; return tokTENSOR;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 117 "qcl.lex"
yylval.TENSOR=2; return tokTENSOR;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 118 "qcl.lex"
yylval.TENSOR=yytext[6]-'0'; return tokTENSOR;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "qcl.lex"
yylval.OBJTYPE=sEXP; return tokBASEFUNCT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "qcl.lex"
yylval.OBJTYPE=sSIN; return tokBASEFUNCT;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "qcl.lex"
yylval.OBJTYPE=sCOS; return tokBASEFUNCT;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "qcl.lex"
yylval.OBJTYPE=sTAN; return tokBASEFUNCT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "qcl.lex"
yylval.OBJTYPE=sCOT; return tokBASEFUNCT;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "qcl.lex"
yylval.OBJTYPE=sSINH; return tokBASEFUNCT;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "qcl.lex"
yylval.OBJTYPE=sCOSH; return tokBASEFUNCT;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "qcl.lex"
yylval.OBJTYPE=sTANH; return tokBASEFUNCT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "qcl.lex"
yylval.OBJTYPE=sCOTH; return tokBASEFUNCT;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "qcl.lex"
yylval.OBJTYPE=sABS; return tokBASEFUNCT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "qcl.lex"
yylval.OBJTYPE=sRE; return tokBASEFUNCT;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "qcl.lex"
yylval.OBJTYPE=sIM; return tokBASEFUNCT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "qcl.lex"
yylval.OBJTYPE=sCONJ; return tokBASEFUNCT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "qcl.lex"
yylval.OBJTYPE=sFLOOR; return tokBASEFUNCT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "qcl.lex"
yylval.OBJTYPE=sCEIL; return tokBASEFUNCT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "qcl.lex"
yylval.OBJTYPE=sSQRT; return tokBASEFUNCT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "qcl.lex"
yylval.OBJTYPE=sINOT; return tokBASEFUNCT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "qcl.lex"
yylval.OBJTYPE=sINT; return tokBASEFUNCT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "qcl.lex"
yylval.OBJTYPE=sREAL; return tokBASEFUNCT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "qcl.lex"
yylval.OBJTYPE=sCOMPLEX; return tokBASEFUNCT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "qcl.lex"
yylval.OBJTYPE=sSTRING; return tokBASEFUNCT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 142 "qcl.lex"
yylval.OBJTYPE=sLOG; return tokLISTFUNCT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 143 "qcl.lex"
yylval.OBJTYPE=sRANDOM; return tokLISTFUNCT;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 144 "qcl.lex"
yylval.OBJTYPE=sMIN; return tokLISTFUNCT;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 145 "qcl.lex"
yylval.OBJTYPE=sMAX; return tokLISTFUNCT;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 146 "qcl.lex"
yylval.OBJTYPE=sGCD; return tokLISTFUNCT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 147 "qcl.lex"
yylval.OBJTYPE=sLCM; return tokLISTFUNCT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 148 "qcl.lex"
yylval.OBJTYPE=sBIT; return tokLISTFUNCT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 149 "qcl.lex"
yylval.OBJTYPE=sIAND; return tokLISTFUNCT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 150 "qcl.lex"
yylval.OBJTYPE=sIOR; return tokLISTFUNCT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 151 "qcl.lex"
yylval.OBJTYPE=sIXOR; return tokLISTFUNCT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "qcl.lex"
yylval.OBJTYPE=sVECTOR; return tokLISTFUNCT;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "qcl.lex"
yylval.OBJTYPE=sMATRIX; return tokLISTFUNCT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "qcl.lex"
{
	yylval.OBJTYPE=(ObjType)(sSCALAR+(yytext[6]-'0'));
        return tokLISTFUNCT;
      }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 160 "qcl.lex"
return tokLISTFUNCT;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 162 "qcl.lex"
BEGIN(SET);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 163 "qcl.lex"
{
	BEGIN(0);
	yylval.STRING=YYNEW(string(yytext)); 
	return tokSET;
      }	
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 169 "qcl.lex"
BEGIN(INC);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 170 "qcl.lex"
{
	yylval.STRING=YYNEW(string(yytext));
	return tokINCLUDE;
      }	
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 174 "qcl.lex"
BEGIN(0);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 177 "qcl.lex"
{
	yylval.OBJ=YYNEW(sConst(tValue(TRUE)));
	return tokCONS;
      }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 182 "qcl.lex"
{
	yylval.OBJ=YYNEW(sConst(tValue(FALSE)));
	return tokCONS;
      }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 187 "qcl.lex"
{
	yylval.OBJ=YYNEW(sConst(tValue((tInt)atol(yytext))));
	return tokCONS;
      }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 192 "qcl.lex"
{
	yylval.OBJ=YYNEW(sConst(tValue((tInt)atol(yytext))));
        unput('.'); unput('.');
	return tokCONS;
      }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 198 "qcl.lex"
{ 
	yylval.OBJ=YYNEW(sConst(tValue((tReal)atof(yytext))));
	return tokCONS;
      }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 203 "qcl.lex"
{
	sscanf(yytext,"(%lf,%lf)",&cnum_real,&cnum_imag);
	yylval.OBJ=YYNEW(sConst(tValue(tComplex(cnum_real,cnum_imag))));
	return tokCONS;
      }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 209 "qcl.lex"
yylval.ID=YYNEW(tId(yytext,strlen(yytext)-1)); return tokIDCALL;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 210 "qcl.lex"
yylval.ID=YYNEW(tId(yytext)); return tokID;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 212 "qcl.lex"
yylval.OBJ=YYNEW(sConst(tValue(string("")))); return tokCONS;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "qcl.lex"
BEGIN(STR);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 215 "qcl.lex"
{
	yylval.OBJ=YYNEW(sConst(tValue((char*)yytext)));
	return tokCONS;
      }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 220 "qcl.lex"
BEGIN(0);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 222 "qcl.lex"
BEGIN(REM);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 223 "qcl.lex"
;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 224 "qcl.lex"
;
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 225 "qcl.lex"
;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 226 "qcl.lex"
BEGIN(0);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 228 "qcl.lex"
BEGIN(COM);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 229 "qcl.lex"
;
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 230 "qcl.lex"
BEGIN(0);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 232 "qcl.lex"
BEGIN(SCINC);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 234 "qcl.lex"
{
	BEGIN(0);
	yylval.STRING=YYNEW(string(yytext));
	return tokINCLUDE;
      }	
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 240 "qcl.lex"
yylval.OBJ=0; return tokPRINT;
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 243 "qcl.lex"
;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR):
case YY_STATE_EOF(REM):
case YY_STATE_EOF(COM):
case YY_STATE_EOF(INC):
case YY_STATE_EOF(SET):
case YY_STATE_EOF(SCINC):
#line 245 "qcl.lex"
yylval.OBJ=0; return tokEOF;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 247 "qcl.lex"
yylval.OBJ=0; return tokERROR; 
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 249 "qcl.lex"
ECHO;
	YY_BREAK
#line 1869 "lex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 405 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 405 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 404);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 249 "qcl.lex"



void yyScanString(string s) { 
  YY_FLUSH_BUFFER;
  if(yyStringBufferActive) yy_delete_buffer(string_buffer);

  string_buffer=yy_scan_string(s.c_str());
  yyIncludeStackPt=0;
  yyStringBufferActive=1;
  yyToplevelFile=0;
  yylineno=1;
}

void yyScanFile(FILE *f) {
  YY_FLUSH_BUFFER;
  if(yyStringBufferActive) yy_delete_buffer(string_buffer);
  yyrestart(f);
  yyIncludeStackPt=0;
  yyStringBufferActive=0;
  yyToplevelFile=f;
  yylineno=1;
}

void yyCleanUp() {
  int i;
  YY_FLUSH_BUFFER;
  yyrestart(stdin);
  if(yyToplevelFile) fclose (yyToplevelFile);
  if(yyStringBufferActive) yy_delete_buffer(string_buffer);
  yyToplevelFile=0;
  yyStringBufferActive=0;
  for(i=0;i<yyIncludeStackPt;i++) {
    if(i) yy_delete_buffer(include_stack[i]);
    if(yyFilePointers[i]) {
      fclose(yyFilePointers[i]);
      yyFilePointers[i]=0;
    }
  }
  yyIncludeStackPt=0;
}


